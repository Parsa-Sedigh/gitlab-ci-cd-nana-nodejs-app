workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
#  - IMAGE_NAME: $CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE (if we had a microservice app)
  - IMAGE_NAME: $CI_REGISTRY_IMAGE
  - IMAGE_TAG: "1.0"
  - DEV_SERVER_HOST: 35.180.46.122
  - DEV_ENDPOINT: http://ec2-35-180-46-122.eu-west-3.compute.amaaonaws.com:3000

stages:
  - test
  - build
  - deploy

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  tags:
    - ec2
    - docker
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

build_image:
  stage: build
  tags:
    - ec2
    - shell
    - remote
  script:
    # $CI_REGISTRY_IMAGE == registry.gitlab.com/<your username>/<project name>

    # non-microservice format for name of the image:
    # - docker build -t $CI_REGISTRY_IMAGE:1.0 .
    # microservice format:
    # - docker build -t $CI_REGISTRY_IMAGE/microservice/payment:1.0 .
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    # $CI_REGISTRY == registry.gitlab.com
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
#    - echo "Docker registry url is $CI_REGISTRY"
#    - echo "Docker registry username is $CI_REGISTRY_USER"
#    - echo "Docker registry image repo is $CI_REGISTRY_IMAGE"
    # docker push registry.gitlab.com/<your username>/<project name>:<version tag>
#    - docker push $CI_REGISTRY_IMAGE/microservice/payment:1.0 (if we had a microservice app)
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy_to_dev:
  stage: deploy
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$DEV_SERVER_HOST:/home/ubuntu

    # change the public IP address to yours!
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEV_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$IMAGE_TAG &&
      
#       docker-compose -f docker-compose.yaml down &&
        docker-compose down &&
      
        ### use docker compose instead of docker run command to run multiple containers at once:
#       docker run -d -p 3000:3000 $IMAGE_NAME:$IMAGE_TAG"
#       docker-compose -f docker-compose.yaml up
        docker-compose up -d

  environment:
    name: development
    url: $DEV_ENDPOINT